plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'com.eden.orchidPlugin' version '0.21.0'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    flatDir {
        dirs 'lib'
    }
    maven { url = "https://kotlin.bintray.com/kotlinx/" }
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-core:2.8.2'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.2'
    implementation 'org.soot-oss:soot:4.2.1'
    implementation name: 'plume-driver-X.X.X'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.3.72'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
    testImplementation 'org.apache.tinkerpop:tinkergraph-gremlin:3.4.5'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    orchidRuntime "io.github.javaeden.orchid:OrchidDocs:0.21.0"
    orchidRuntime "io.github.javaeden.orchid:OrchidKotlindoc:0.21.0"
    orchidRuntime "io.github.javaeden.orchid:OrchidPluginDocs:0.21.0"
    orchidRuntime "io.github.javaeden.orchid:OrchidGithub:0.21.0"
}

sourceSets {
    main.java.srcDirs = []
    main.kotlin.srcDirs = ['src/main/kotlin']
    main.resources.srcDirs = ['src/main/resources']
    test.java.srcDirs = ['src/test/kotlin']
    test.resources.srcDirs = ['src/test/resources']
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        html.destination file("${buildDir}/reports/jacoco")
        csv.enabled false
    }
}

orchid {
    theme = "Editorial"
    baseUrl = "https://plume-oss.github.io/plume-extractor"
    version = "0.0.1"
    githubToken = System.getenv("ORCHID_TOKEN")
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport

group = 'za.ac.sun.plume'
version = 'X.X.X'
description = 'Projects a Java program into a code-property graph which is inserted it into a graph database.'
sourceCompatibility = '8'

task fatJar(type: Jar) {
    archiveClassifier.set('all')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

artifacts {
    archives fatJar
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
